# Multi-stage build para produção
# Stage 1: Build dependencies
FROM python:3.12-alpine AS builder

# Instalar dependências de build
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    openssl-dev \
    python3-dev

WORKDIR /app

# Copiar requirements e instalar dependências
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir --user -r requirements.txt

# Stage 2: Production image
FROM python:3.12-alpine AS production

# Instalar apenas dependências runtime necessárias
RUN apk add --no-cache \
    libffi \
    openssl

# Criar usuário não-root
RUN addgroup -g 1001 -S appgroup && \
    adduser -S appuser -u 1001 -G appgroup

# Configurar diretório de trabalho
WORKDIR /app

# Copiar dependências do stage builder
COPY --from=builder /root/.local /home/appuser/.local

# Copiar código da aplicação
COPY . .

# Dar permissões ao usuário da aplicação
RUN chown -R appuser:appgroup /app

# Mudar para usuário não-root
USER appuser

# Adicionar .local/bin ao PATH
ENV PATH=/home/appuser/.local/bin:$PATH

# Variáveis de ambiente para produção
ENV FLASK_ENV=production
ENV FLASK_DEBUG=false
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expor porta
EXPOSE 8787

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8787/status')" || exit 1

# Comando para produção
CMD ["python", "app.py"]